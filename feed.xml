<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description>Rambling about web development in particular, programming in general, philosophy on  the side and everything else in the middle.
</description>
    <link>http://cored.github.io</link>
    <atom:link href="http://cored.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Solid Go Refactoring To Open Close Principle</title>
        <description>&lt;p&gt;This is a continuation of my series of articles related to the SOLID
principles and how they apply to Go programs.  In this entry I will try to
explain how I refactored a piece of functionality to make it open for extension
and closed for modification.&lt;/p&gt;

&lt;p&gt;But first, what does that mean?&lt;/p&gt;

&lt;h1&gt;Open/Closed Principle&lt;/h1&gt;

&lt;p&gt;The formal definition of this principle goes as follows:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;You should be able to extend the behavior of a system without having to modify that system.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;However, in practice, what exactly does that mean? Let&amp;#39;s look at some example
code which happens to be in production right now. For the sake of simplicity I removed the logic
related to the persistence side of things.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CreateUnlockToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userID&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;tokenGenerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NewTokenGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cfg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TokenPepper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;rawToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tokenGenerator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;GenerateUnlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;err&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What this code is trying to do is to create and persist a token in
the database for a given user. At first glance this code looks ok. But looking
closer we can see some issues:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;There&amp;#39;s no way to test the token generation isolated from the persistence
logic, forcing the test to integrate with the database every time you want to
test that logic.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If I want to reuse this token I will have to duplicate the code.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The &lt;code&gt;GenerateUnlock&lt;/code&gt; function is returning three types which implies doing
more than one thing thus breaking the &lt;a href=&quot;http://cored.github.io/blog/2016/09/26/following-solid-in-go-srp&quot;&gt;Single Responsibility Principle&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let&amp;#39;s try to address those issues. By introducing an interface we are
going to make the &lt;code&gt;CreateUnlockToken&lt;/code&gt; function depend on an abstraction instead of
a concrete type and remove the coupling between the store and the token generator:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Token&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Encoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UnlockToken&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pepper&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;raw&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;encoded&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NewUnlockToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pepper&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UnlockToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Login to handle the token pepper and return a new UnlockToken&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// We are going to return an error just in case something happen while&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// generating the unlock token&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UnlockToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generatedRaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;encoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;generatedEncoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ult&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UnlockToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;raw&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ult&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;UnlockToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Encoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;encoded&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TestUnlockToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;when generating a valid unlock token&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ... assert for raw and encoded&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And now the new implementation for the store goes like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CreateUnlockToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;email&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;userID&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Token&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// use the token data by calling token.Raw() or token.Encoded()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the test will look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FakeUnlockToken&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;MockedRaw&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;MockedEncoded&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fut&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FakeUnlockToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Raw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MockedRaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fut&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FakedUnlockToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Encoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fut&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;MockedEncoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;TestCreateUnlockToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;when passing an invalid token&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;postgresStore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NewPostgres&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;fut&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;FakeUnlockToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;MockedRaw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;invalid-raw&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;MockedEncoded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;invalid-encoded&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// ... persistence assertions&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This looks better now so I guess we can close our editors go home and chill,
right? Wrong. There&amp;#39;s something missing from this code which is the fact that
we need to instantiate our new &lt;code&gt;UnlockToken&lt;/code&gt;. Since the new &lt;code&gt;CreateUnlockToken&lt;/code&gt;
depends on a token and we want to inject it, let&amp;#39;s make the client of that
function be the one instantiating the token.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Server&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;CreateUnlockToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;store&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;CreateUnlockToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;UserID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;NewUnlockToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cfg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;TokenPepper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Voila! With this small refactor we changed the inner components of the code to
depend on an abstraction and now we can swap implementations of tokens.&lt;/p&gt;

&lt;p&gt;The open/closed principle helps us by reducing the coupling between components and
as a consequence we will have maintainable code bases that are easier to extend and change
in the future.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://github.com/jefffederman&quot;&gt;Jeff Federman&lt;/a&gt; for the proof reading :-)&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Dec 2016 00:00:00 -0500</pubDate>
        <link>http://cored.github.io/blog/2016/12/21/solid-go-refactoring-to-open-close-principle</link>
        <guid isPermaLink="true">http://cored.github.io/blog/2016/12/21/solid-go-refactoring-to-open-close-principle</guid>
      </item>
    
      <item>
        <title>Single Responsibility Principle in Go</title>
        <description>&lt;p&gt;After watching &lt;a href=&quot;https://www.youtube.com/watch?v=0IaBAl7onCE&quot;&gt;Dave Cheney&amp;#39;s talk about SOLID principles in Go&lt;/a&gt;,
I wanted to jump into the discussion in a practical way; so I decided to solve
an small problem and see how to apply at least one principle in this case SRP.
The problem that I&amp;#39;m going to solve is to build a data model for
for &lt;a href=&quot;https://en.wikipedia.org/wiki/Standard_52-card_deck&quot;&gt;a deck of cards&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To make sure that we are going to move in the right path let&amp;#39;s try to TDD our
way through this problem.  TDD is a tool for designing software and as a side effect
it provides us with the benefit of automatic correctness checking.&lt;/p&gt;

&lt;p&gt;So, How do we start? Let&amp;#39;s define some requirements based on the Wikipedia
article.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;When dealing a new deck
I want to get 52 cards

When I put card in the deck
I want to see a rank and a suit for that card
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think this two requirements are good to start and we can always go back to
our product owner and add more stories to the backlog.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s implement the first requirement by writing a test. Before dealing the deck we
need to create it; so let&amp;#39;s write that test.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;package main_test

import (
    &amp;quot;testing&amp;quot;

    &amp;quot;github.com/stretchr/testify/assert&amp;quot;
)

func TestNewDeck(t *testing.T) {
    t.Run(&amp;quot;when creating a new deck&amp;quot;, func(t *testing.T) {
        deck := Deck{}

        assert.Equal(t, len(deck.Cards), 52, &amp;quot;retrieve 52 cards&amp;quot;)
    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A good practice for naming package for testing is to use the &lt;code&gt;_test&lt;/code&gt; by using
this nomenclature we will be force to be explicit about external dependencies
by exporting just what we need. Since the test is our first client it make a lot
of sense.&lt;/p&gt;

&lt;p&gt;By running the test we get the following error:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;main_test.go|14| deck.Cards undefined (type main.Deck has no field or method Cards)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The compiler is saying that we need to add a new &lt;code&gt;Deck&lt;/code&gt; struct with a field
name &lt;code&gt;Cards&lt;/code&gt; exposing the question - what is a card? The way to figure that out
is by adding a new test for it. If we take a closer look at our old test it doesn&amp;#39;t
say much about what makes a card be a card. Based on the wikipedia article we know
that a card consist of a rank and a suit. So let&amp;#39;s define that test.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;    t.Run(&amp;quot;when creating a new deck&amp;quot;, func(t *testing.T) {
        deck := Deck{}
        t.Run(&amp;quot;it contains four aces of spades, clubs, diamonds and hearts&amp;quot;, func(t *testing.T) {
            aces := []Card{}
            expectedCards := []Card{
                Card{Rank: &amp;quot;ace&amp;quot;, Suit: &amp;quot;hearts&amp;quot;},
                Card{Rank: &amp;quot;ace&amp;quot;, Suit: &amp;quot;diamonds&amp;quot;},
                Card{Rank: &amp;quot;ace&amp;quot;, Suit: &amp;quot;spades&amp;quot;},
                Card{Rank: &amp;quot;ace&amp;quot;, Suit: &amp;quot;clubs&amp;quot;},
            }
            for _, card := range deck.Cards {
                if card.Rank == &amp;quot;ace&amp;quot; {
                    aces := append(aces, card)
                }
            }
            assert.Equal(t, expectedCards, aces)
        })
    })
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;What we get by running this test is the following error:
&lt;code&gt;
main.go|4| undefined: Card
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;So let&amp;#39;s define the &lt;code&gt;Card&lt;/code&gt; type:
&lt;code&gt;
type Card struct {
    Rank string
    Suit string
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After writing the production code the test is showing us our first assertion failure:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;--- FAIL: TestNewDeck (0.00s)
        --- FAIL: TestNewDeck/when_creating_a_new_deck (0.00s)
                --- FAIL: TestNewDeck/when_creating_a_new_deck/it_contains_four_aces_of_spades,_clubs,_diamonds_and_hearts (0.00s)
                Error Trace:    ns.go:225:
                Error:          Not equal: []main.Card{main.Card{Rank:&amp;quot;ace&amp;quot;, Suit:&amp;quot;hearts&amp;quot;}, main.Card{Rank:&amp;quot;ace&amp;quot;, Suit:&amp;quot;diamonds&amp;quot;}, main.Card{Rank:&amp;quot;ace&amp;quot;, Suit:&amp;quot;spades&amp;quot;}, main.Card{Rank:&amp;quot;ace&amp;quot;, Suit:&amp;quot;clubs&amp;quot;}} (expected)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since we need a way to build the inner state of the deck at this point is a good idea
to introduce a proper constructor for the &lt;code&gt;Deck&lt;/code&gt; to handle the initial state of
the data:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;var (
    ranks = []string{&amp;quot;ace&amp;quot;}
    suits = []string{&amp;quot;hearts&amp;quot;, &amp;quot;diamonds&amp;quot;, &amp;quot;spades&amp;quot;, &amp;quot;clubs&amp;quot;}
)

type Card struct {
    Rank string
    Suit string
}

type Deck struct {
    Cards []Card
}

func NewDeck() Deck {
    cards := []Card{}
    for _, rank := range ranks {
        for _, suit := range suits {
            cards = append(cards, Card{Rank: rank, Suit: suit})
        }
    }
    return Deck{Cards: cards}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After making our first test green let&amp;#39;s see if we can finish the TDD loop cycle
with a refactor. Our rule of thumbs for doing refactoring is to follow the
SOLID principles.&lt;/p&gt;

&lt;p&gt;What can we refactor? One thing that we could do is to introduce better names
for our packages. The &lt;code&gt;main&lt;/code&gt; package name does not say much about what the
inner components are so let&amp;#39;s use the name &lt;code&gt;deck&lt;/code&gt; instead. By changing the name
of the package we are following SRP by grouping components that change for the
same reason.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;package deck

var (
    ranks = []string{&amp;quot;ace&amp;quot;}
    suits = []string{&amp;quot;hearts&amp;quot;, &amp;quot;diamonds&amp;quot;, &amp;quot;spades&amp;quot;, &amp;quot;clubs&amp;quot;}
)

type Card struct {
    Rank string
    Suit string
}

type Deck struct {
    Cards []Card
}

func NewDeck() Deck {
    cards := []Card{}
    for _, rank := range ranks {
        for _, suit := range suits {
            cards = append(cards, Card{Rank: rank, Suit: suit})
        }
    }
    return Deck{Cards: cards}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Good we rename the package name and the test keep passing. Now there&amp;#39;s
something else that is showing up and is the fact that we have a name overload
for our constructor we don&amp;#39;t need to say that we are creating a new deck if we
are already using the &lt;code&gt;deck&lt;/code&gt; as a package name so let&amp;#39;s rename that
constructor:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;package deck

var (
    ranks = []string{&amp;quot;ace&amp;quot;}
    suits = []string{&amp;quot;hearts&amp;quot;, &amp;quot;diamonds&amp;quot;, &amp;quot;spades&amp;quot;, &amp;quot;clubs&amp;quot;}
)

type Card struct {
    Rank string
    Suit string
}

type Deck struct {
    Cards []Card
}

func New() Deck {
    cards := []Card{}
    for _, rank := range ranks {
        for _, suit := range suits {
            cards = append(cards, Card{Rank: rank, Suit: suit})
        }
    }
    return Deck{Cards: cards}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That looks accurate however what about the &lt;code&gt;Card&lt;/code&gt; struct? Do we really need to
export it? Are we going to use a &lt;code&gt;Card&lt;/code&gt; without a &lt;code&gt;Deck&lt;/code&gt; ever? Well to me it
doesn&amp;#39;t make sense to use just one a card without the entire deck unless you
are the Joker. So let&amp;#39;s not export this structure to the outside world.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;package deck

var (
    ranks = []string{&amp;quot;ace&amp;quot;}
    suits = []string{&amp;quot;hearts&amp;quot;, &amp;quot;diamonds&amp;quot;, &amp;quot;spades&amp;quot;, &amp;quot;clubs&amp;quot;}
)

type card struct {
    Rank string
    Suit string
}

type Deck struct {
    Cards []card
}

func New() Deck {
    cards := []card{}
    for _, rank := range ranks {
        for _, suit := range suits {
            cards = append(cards, card{Rank: rank, Suit: suit})
        }
    }
    return Deck{Cards: cards}
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After doing that change and running the test we get a new compilation error:
&lt;code&gt;
deck_test.go|14| undefined: deck.Card
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here comes the confirmation of the use of &lt;code&gt;_test&lt;/code&gt; since we are not allowed to
use private members of our package we will need to think in terms of how the
client will use the information that belong to our two data structures. Instead
of initializing an expected list of cards let&amp;#39;s define it in terms of it&amp;#39;s
formatted data or in other words what a final user will want to know something that
we can build without thinking about too many internal details:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;func TestNewDeck(t *testing.T) {
    t.Run(&amp;quot;when creating a new deck&amp;quot;, func(t *testing.T) {
        d := deck.New()
        t.Run(&amp;quot;it contains four aces of spades, clubs, diamonds and hearts&amp;quot;, func(t *testing.T) {
            aces := []string{}
            expectedCards := []string{
                `ace of hearts`,
                `ace of diaminds`,
                `ace of spades`,
                `ace of clubs`,
            }
            for _, card := range d.Cards {
                if card.Rank == &amp;quot;ace&amp;quot; {
                    aces = append(aces, card.String())
                }
            }
            assert.Equal(t, expectedCards, aces)
        })

    })
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After refactoring the test we get the following error:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;deck_test.go|23| card.String undefined (type deck.card has no field or method String)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because of course we are missing the implementation of the &lt;code&gt;stringer&lt;/code&gt; interface
let&amp;#39;s add that:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;func (c card) String() string {
    return fmt.Sprintf(&amp;quot;%s of %s&amp;quot;, c.Rank, c.Suit)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think this is a good spot to stop; since the idea was to showcase just
the Single Responsibility Principle.&lt;/p&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;As Sandi Metz said &lt;code&gt;Design is the art of arranging code that needs to work
today, and to be easy to change forever&lt;/code&gt; something that we can do with the TDD
cycle by making a failing test past and then moving the design towards the
SOLID principle through continuous refactor.&lt;/p&gt;
</description>
        <pubDate>Mon, 26 Sep 2016 17:28:18 -0400</pubDate>
        <link>http://cored.github.io/blog/2016/09/26/following-solid-in-go-srp</link>
        <guid isPermaLink="true">http://cored.github.io/blog/2016/09/26/following-solid-in-go-srp</guid>
      </item>
    
      <item>
        <title>Defining custom types in Go</title>
        <description>&lt;p&gt;As Alan Perlis once said:
&lt;em&gt;The string is a stark data structure and everywhere it is passed there is much
duplication of process. It is a perfect vehicle for hiding information&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s explore this issue with some code extracted from an OSS project
&lt;a href=&quot;http://github.com/namely/broadway&quot;&gt;Broadway&lt;/a&gt; Namely&amp;#39;s deployment tool for staging environments.&lt;/p&gt;

&lt;p&gt;Broadway has the concept of an instance which is the data representation of what the
system uses to deploy services into &lt;a href=&quot;http://kubernetes.io&quot;&gt;Kubernetes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is the definition of that data:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;type Instance struct {
  PlaybookID string
  ID string
  Status
}

func (i *Instance) Path() string {
  return fmt.Sprintf(&amp;quot;%s/instances/%s/%s&amp;quot;, env.EtcdPath, i.PlaybookID, i.ID)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The main issue with this implementation is duplication. If a programmer needs
a &lt;code&gt;Path&lt;/code&gt; for others use cases he will have to replicate the same string formatting
every time. The problem with this is the duplication of information.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Don%27t_repeat_yourself&quot;&gt;don&amp;#39;t repeat yourself&lt;/a&gt; principle states to have only one representation of
any concept in the system; abstractions like this make new concepts evident.&lt;/p&gt;

&lt;p&gt;How can we solve that issue? One approach would be to create a function
to do the formatting, like so:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;func BuildPath(PlaybookID, ID string) string {
  return fmt.Sprintf(&amp;quot;%s/instances/%s/%s&amp;quot;, env.EtcdPath, PlaybookID, ID)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And that will reduce the coupling between the data and the behavior. However if
we take a look a little bit closer we are actually hiding is an important concept
from the domain which is a &lt;code&gt;Path&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How do we know that we are hiding an important concept from the system? To
answer that question let&amp;#39;s take a look to another code example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;func ThatExpectAPath(path string) {
  // do something here with a Path
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The issue here is that the function is expecting a &lt;code&gt;string&lt;/code&gt; as an argument not
specifically a &lt;code&gt;Path&lt;/code&gt; type which is the actual concept that this function needs.
The reason why this is an issue is  because you could pass any string and the compiler
won&amp;#39;t complain. Wouldn&amp;#39;t be better if you have a safety net in place to force you to
look the proper way for formatting a &lt;code&gt;Path&lt;/code&gt;? Well you have it since you are using an
static typed language. The only piece missing is the new type definition which for this
particular case at least the naming is evident; let&amp;#39;s see this in action:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;type Path struct {
  PlaybookID string
  ID string
  RootPath string
}

func (p *Path) String() string {
  return fmt.Sprintf(&amp;quot;%s/instances/%s/%s&amp;quot;, p.RootPath, p.PlaybookID, p.ID)
}

func ThatExpectAPath(path Path) {
  // do something here with a Path
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The two main benefits of this approach are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;;t:%20l%20%20//en.wikipedia.org/wiki/Separation_of_concernsss&quot;&gt;Separation of concerns&lt;/a&gt;, now every time that we want to change something in the
system we won&amp;#39;t need to hunt down for different ways for creating a new &lt;code&gt;Path&lt;/code&gt;
we are going to look at the type and do what we need according to that definition.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;&quot;&gt;Higher level of abstraction&lt;/a&gt;, the only way that we humans have to avoid
complexity is to work on a higher level of abstraction. We can get more done by
combining different components rather than manipulating variables and control
flows.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What about creating the wrong abstraction? The answer for that one is easy;
just rollback into the old code and start over. It will be easier for the client
to remove a type and start with duplication than to hunt that code down and remove
it when there&amp;#39;s no obvious starting point.&lt;/p&gt;

&lt;p&gt;How does this small piece fit with the rest of the system? Now we can use the
embedded type mechanism of Go and compose our old type.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;type Instance struct {
  ...
  Path
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that in place we can keep using the same formatting across the system and
have the safety net of the compiler when passing that concept around.&lt;/p&gt;

&lt;p&gt;By introducing this custom type in the system we decrease the translation cost
between &lt;a href=&quot;http://martinfowler.com/bliki/UbiquitousLanguage.html&quot;&gt;business concepts and implementation details&lt;/a&gt; making it easier for developers
to compose better abstractions with smaller reusable components.&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Aug 2016 08:42:34 -0400</pubDate>
        <link>http://cored.github.io/blog/2016/08/25/defining-custom-types-in-go</link>
        <guid isPermaLink="true">http://cored.github.io/blog/2016/08/25/defining-custom-types-in-go</guid>
      </item>
    
      <item>
        <title>Test Doubles in Go</title>
        <description>&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;// Examples of doing test doubles in Go tests
// Extracted from https://blog.8thlight.com/uncle-bob/2014/05/14/TheLittleMocker.html
type Authorizer interface {
    Authorize(username, password string) bool
}
// Dummy: Pass it around when you don&amp;#39;t care how it is use
type DummyAuthorizer struct {}
func (da *DummyAuthorizer) Authorize(username, password string) bool {
        return false
}

// Stub: Use it when you want to test a component on your system in a particular context
type DummyAuthorizer struct {}
func (da *DummyAuthorizer) Authorize(username, password string) bool {
        return true
}

// Spy: Use it when you want to know that the Authorize method was called
type AcceptingAuthorizerSpy struct {
     AuthorizeWasCalled bool
}
func (as *AcceptingAuthorizerSpy) Authorize(username, password string) bool {
        as.AuthorizeWasCalled = true
        return true
}

// Fake has business behavior. You can drive a fake to behave in different ways by giving it different data.
type FakeAuthorizer struct {}
func (da *FakeAuthorizer) Authorize(username, password string) bool {
        return username == &amp;quot;Bob&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Mon, 30 May 2016 17:10:14 -0400</pubDate>
        <link>http://cored.github.io/blog/2016/05/30/test-doubles-in-go</link>
        <guid isPermaLink="true">http://cored.github.io/blog/2016/05/30/test-doubles-in-go</guid>
      </item>
    
      <item>
        <title>Til: Getting Into Rescue Mode With a Linux System</title>
        <description>&lt;p&gt;I think this is old and to be honest I partially knew it but either way I think
it would be better documented now. What I learned today was a better way to fix my Arch
Linux system after forgetting about mounting the boot partition and upgrading
the kernel; needless to say that you don&amp;#39;t want to do that. So, with further
ado here are the steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;In grub press e - to edit the menu configuration options&lt;/li&gt;
&lt;li&gt;Go to the line in which the command linux is written&lt;/li&gt;
&lt;li&gt;Go the end of that line and type init=single&lt;/li&gt;
&lt;li&gt;Hit ctrl-x&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;At the new prompt type the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;mount /dev/sda1 /new_root/boot -&amp;gt; If sda1 is the partition in which you have
boot&lt;/li&gt;
&lt;li&gt;mount &lt;any_other_relevant_partitions&gt;&lt;/li&gt;
&lt;li&gt;mount -t proc proc /new_root/proc&lt;/li&gt;
&lt;li&gt;mount -t sysfs sys /new_root/sys&lt;/li&gt;
&lt;li&gt;mount -o bind /dev /new_root/dev&lt;/li&gt;
&lt;li&gt;chroot /new_root bash&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And voila, you will be in your more or less normal system waiting for you to
fix it.&lt;/p&gt;
</description>
        <pubDate>Tue, 13 Oct 2015 17:51:41 -0400</pubDate>
        <link>http://cored.github.io/blog/2015/10/13/til-getting-into-rescue-mode-with-a-linux-system</link>
        <guid isPermaLink="true">http://cored.github.io/blog/2015/10/13/til-getting-into-rescue-mode-with-a-linux-system</guid>
      </item>
    
      <item>
        <title>Interviews - Asking the Right Question</title>
        <description>&lt;p&gt;For a long time I was in the mistaken position of not asking questions in
interviews. After several bad careers decisions I decided that enough was
enough. I needed to learn how to figure out if the company in question was good
so I wrote a questionnaire to ask in interviews. I got some success
just questioning my interviewer about their internal technology stack, what
does he/she thinks about the technology they were using and such and such.&lt;/p&gt;

&lt;p&gt;The thing is that we get older and wiser. And now I think the most important
thing that we should try to learn from an interview before signing anything is
how well establish the organization&amp;#39;s processes are. I&amp;#39;m talking about the
things that really matter to deliver actual value to the business.&lt;/p&gt;

&lt;p&gt;It is not enough to know that the company is using an &amp;quot;agile methodology&amp;quot; you
should figure out if they are actually committed to the benefits of following
such methodology. You should figure out if the company is actually committed to
delivering well crafted code. Are they doing test driven development?
Are they doing continues improvement to the code through refactoring? If you
can&amp;#39;t figure this out in the interview then you should reconsider if that
company will be a good fit for you.&lt;/p&gt;

&lt;p&gt;Probably you are thinking but I need a job right away. And I understand that
but you shouldn&amp;#39;t be putting yourself in a position of suffering; believe me
when I say this if you don&amp;#39;t figure out the amount of effort that you will have to
do to just deliver value to that company you will suffer.  To me life is too short to
be miserable most of the time and since we spend a lot of time at work is better
to find the place that is actually align with our values and goals so we can
smile more often about the things that we love the most, coding.&lt;/p&gt;
</description>
        <pubDate>Wed, 30 Sep 2015 15:10:12 -0400</pubDate>
        <link>http://cored.github.io/blog/2015/09/30/interviews-asking-the-right-question</link>
        <guid isPermaLink="true">http://cored.github.io/blog/2015/09/30/interviews-asking-the-right-question</guid>
      </item>
    
      <item>
        <title>My List of Best Practices for Rails Applications</title>
        <description>&lt;p&gt;Today I decided to write about a list of rules that I follow when working with
Rails. This rules are by no mean the way to go for everyone take what you think
is correct and try to use it. I will try to update this list as new rules
appears on my experiment.&lt;/p&gt;

&lt;h2&gt;Controllers&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Do not call any query methods directly to a model (Finders methods are ok to
call).&lt;/li&gt;
&lt;li&gt;Do not catch active record exceptions.&lt;/li&gt;
&lt;li&gt;Do not use if statements inside actions (Use service or interactor objects for handling the business logic).&lt;/li&gt;
&lt;li&gt;Do not use filters.&lt;/li&gt;
&lt;li&gt;Return just one instance variable from your actions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Testing&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Just test for the proper http code if developing an API&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Active Record&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Reference models within other models for anything else expose a public
method.&lt;/li&gt;
&lt;li&gt;Wrap methods for create/update/save to define a persistence API for the application.&lt;/li&gt;
&lt;li&gt;Wrap in scopes every query methods for the model.&lt;/li&gt;
&lt;li&gt;Do not throw exceptions from methods return true or false.&lt;/li&gt;
&lt;li&gt;Do not use callbacks be explicit about your methods calls.&lt;/li&gt;
&lt;li&gt;Extend behavior of models using decorators.&lt;/li&gt;
&lt;li&gt;Validations are a good thing to use inside models if they turn out to be too complex
use a validator object.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Testing&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Just test behavior avoid testing implementation things like
&lt;code&gt;
expect(model).to has_one(another_model)
&lt;/code&gt;
are discourage.&lt;/li&gt;
&lt;li&gt;Same thing for validations; test it indirectly through testing behavior.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Views&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Do not use helpers for formatting data use presenters objects.&lt;/li&gt;
&lt;li&gt;Do not use predicate helper methods in your views for handling conditionals
use view models.&lt;/li&gt;
&lt;li&gt;Wrap validations for forms within Form Objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Testing&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Do not test views; there&amp;#39;s no logic in there&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Probably you will be asking where should I put all the business logic for my
application; well you have a plethora of concepts from the object oriented
design world. You can use interactors or services, decorators, adapters,
presenters, value objects; try to find what&amp;#39;s right for your case and implement it.
Remember that Rails is just a framework it is not your application.&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;h1&gt;Talks&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=WpkDN78P884&quot;&gt;Architecture: The Lost Years&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=IqajIYxbPOI&quot;&gt;Refactoring Fat Models with Patterns&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Articles&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://sourcemaking.com/design_patterns&quot;&gt;Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://blog.steveklabnik.com/posts/2011-09-06-the-secret-to-rails-oo-design&quot;&gt;The Secret to Rails OO Design&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Books&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://rails-refactoring.com/&quot;&gt;Fearless Refactoring&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://thoughtbot.com/books&quot;&gt;Ruby Science&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 23 Jun 2015 07:11:22 -0400</pubDate>
        <link>http://cored.github.io/blog/2015/06/23/my-list-of-best-practices-for-rails-applications</link>
        <guid isPermaLink="true">http://cored.github.io/blog/2015/06/23/my-list-of-best-practices-for-rails-applications</guid>
      </item>
    
      <item>
        <title>Pairate another pairing session</title>
        <description>&lt;p&gt;So, this week I had another pairing session and as always it&amp;#39;s blows my mind
the way that I need to think for better terms to explain what I&amp;#39;m thinking to
other people. For this session me and my pairing partner were working on a library
for creating coding katas challenges based on (Codewars)[http://codewars.com] challenges,
which is a great idea and probably I&amp;#39;ll keep contributing to the project.&lt;/p&gt;

&lt;p&gt;Regarding the session itself we were arguing regarding how, what and why to test
which gave me more insight in the way I approach a problem. We ended up doing the
(String Calculator Kata)[http://osherove.com/tdd-kata-1/] instead of his idea just
to practice a little bit of TDD. Revisiting old challenges is a great way to
acknowledge some of your deficiencies as a developer.  I recommend to everyone that
from time to time just go ahead and pair with someone and using old code and
try to rewrite it you won&amp;#39;t just learn a lot technically but also about you as
a person.&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;p&gt;(Pirates)[http://github.com/pairates] - Organization related to all the
projects I&amp;#39;ll be working on for the pairing sessions.&lt;/p&gt;
</description>
        <pubDate>Fri, 15 May 2015 09:55:42 -0400</pubDate>
        <link>http://cored.github.io/blog/2015/05/15/pairate-another-pairing-session</link>
        <guid isPermaLink="true">http://cored.github.io/blog/2015/05/15/pairate-another-pairing-session</guid>
      </item>
    
      <item>
        <title>Paring Session: Adding roles to a Rails app</title>
        <description>&lt;p&gt;The other day I decided to start doing something that &lt;a href=&quot;https://twitter.com/avdi&quot;&gt;Avdi Grimm&lt;/a&gt;
is been doing for a long time now; pairing. I&amp;#39;m not doing it as a business
thought just as a way for me to solidify my own knowledge and learn new things
with interested people.&lt;/p&gt;

&lt;p&gt;In my first session I did learn quite a few thing; but most of all I learned
about my own way of understanding problems and explaining them to others. My
pairing partner for this session have an application in which he wanted to add
a role mechanism for managing administrator users and normal users; yes I know
a lot of seasoned Rails developers would say &amp;quot;That&amp;#39;s easy man&amp;quot; and I agree but
having the patience to explain the issue is another totally different
challenge and even when I already did this in the past I learned some new
library that I will check out like: &lt;a href=&quot;https://github.com/blowmage/minitest-rails-capybara&quot;&gt;minitest-rails-capybara&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This was a great experience and I will totally try to do it again; some of the
things that I need to take into account is to coordinate the problem to work on
before the actual session and also beware of different development
environments. I&amp;#39;ll see what next week brings with this new experiments.&lt;/p&gt;
</description>
        <pubDate>Thu, 07 May 2015 21:47:24 -0400</pubDate>
        <link>http://cored.github.io/blog/2015/05/07/paring-session-adding-roles-to-a-rails-app</link>
        <guid isPermaLink="true">http://cored.github.io/blog/2015/05/07/paring-session-adding-roles-to-a-rails-app</guid>
      </item>
    
      <item>
        <title>Service Objects in Rails</title>
        <description>&lt;p&gt;TLDR; &lt;/p&gt;

&lt;p&gt;&lt;em&gt;Service Layer to represent a domain-oriented layer of behaviors that provide
an API for the domain layer.&lt;/em&gt; - Martin Fowler&lt;/p&gt;

&lt;p&gt;There&amp;#39;s been a lot of talk about service objects in Rails; &lt;a href=&quot;http://blog.codeclimate.com/blog/2012/10/17/7-ways-to-decompose-fat-activerecord-models/&quot;&gt;Code Climate&lt;/a&gt;, &lt;a href=&quot;https://www.agileplannerapp.com/blog/building-agile-planner/refactoring-with-hexagonal-rails&quot;&gt;Hexagonal Rails&lt;/a&gt; and many others places.
This post goal is to try to centralize as much info as I can from the research
that I&amp;#39;ve been making with this type of approach in Rails applications.&lt;/p&gt;

&lt;p&gt;Some people say there are different flavors of service objects; what I normally
suggest is that you need to follow the principles as much as possible. For
instance following &lt;a href=&quot;http://en.wikipedia.org/wiki/Single_responsibility_principle&quot;&gt;SRP&lt;/a&gt; will lead you to a proper separation of concerns between
your business logic and the framework around it.&lt;/p&gt;

&lt;p&gt;The following are the different approaches that people tend to use when
implementing service objects in Rails:&lt;/p&gt;

&lt;p&gt;I will use one action from a controller within the project &lt;a href=&quot;https://github.com/DefactoSoftware/Hours&quot;&gt;Hours&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CategoriesController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:category_created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@categories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by_name&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;categories/index&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Refactoring: Some people implement service objects like this&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CategoryService&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@categories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by_name&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CategoriesController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;category_service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CategoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
     &lt;span class=&quot;vi&quot;&gt;@category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:category_created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
     &lt;span class=&quot;vi&quot;&gt;@categories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;
     &lt;span class=&quot;vi&quot;&gt;@category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;categories/index&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Advantages&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Test in isolation&lt;/li&gt;
&lt;li&gt;The controller doesn&amp;#39;t interact directly with persistence logic&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Disadvantages&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Coupling between the controller and the service&lt;/li&gt;
&lt;li&gt;The controller still makes decisions based on the service state&lt;/li&gt;
&lt;li&gt;Breaks &amp;quot;Tell, don&amp;#39;t ask&amp;quot;&lt;/li&gt;
&lt;li&gt;We are making decisions in two different places&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Refactoring: Matt Wynne - Hexagonal Rails way&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CategoryService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:listener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_on_success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_on_failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CategoriesController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
   &lt;span class=&quot;vi&quot;&gt;@category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CategoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_on_success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;vi&quot;&gt;@category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:category_created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create_on_failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;vi&quot;&gt;@category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;
   &lt;span class=&quot;vi&quot;&gt;@categories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;categories/index&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Advantages&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;There is no more decision making in the controller based on the service state&lt;/li&gt;
&lt;li&gt;Reduce coupling&lt;/li&gt;
&lt;li&gt;The business logic is now part of a well define object&lt;/li&gt;
&lt;li&gt;Proper encapsulation of data inside the service.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Disadvantages&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Most controllers have more than one action in it; so you will need to write
two new public methods for each action.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Side note&lt;/h3&gt;

&lt;p&gt;You could always use &lt;a href=&quot;https://github.com/jonleighton/focused_controller&quot;&gt;one action per conroller&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Refactoring: Using lambdas instead of explicit method definitions&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CategoryService&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;vi&quot;&gt;@category_params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category_params&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CategoriesController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
   &lt;span class=&quot;no&quot;&gt;CategoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
   &lt;span class=&quot;ss&quot;&gt;success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:category_created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
   &lt;span class=&quot;ss&quot;&gt;failure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@categories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;categories/index&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Advantages&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Every single advantage of the prior refactorings&lt;/li&gt;
&lt;li&gt;Do not pollute the public API of the controller&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Disadvantages&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Is not that good for code that runs independently of whatever it&amp;#39;s happening
at the moment of action execution; eg. logging; analytics.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Refactoring: Using the wisper gem for service definition&lt;/h2&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CategoryService&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Wisper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Publisher&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;broadcast&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category_created_successfully&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;broadcast&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category_created_unsuccessfully&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by_name&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CategoriesController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;category_service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CategoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;category_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category_created_successfully&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:category_created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;category_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category_created_unsuccessfully&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@categories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;categories/index&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;category_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1&gt;Advantages&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Every single advantage of the other refactorings&lt;/li&gt;
&lt;li&gt;Easier to compose orthogonal behavior; for instance:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CategoriesController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;category_service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;CategoryService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;category_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LoggingListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;category_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category_created_successfully&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;notice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:category_created&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;category_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category_created_unsuccessfully&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@categories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;categories&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;categories/index&amp;quot;&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;category_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category_params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CategoryService&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Wisper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Publisher&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;broadcast&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;save&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;broadcast&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category_created_successfully&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;broadcast&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:category_created_unsuccessfully&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Category&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by_name&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LoggingListener&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Info: &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;inspect&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Adheres to the &lt;a href=&quot;http://en.wikipedia.org/wiki/Open/closed_principle&quot;&gt;Open/Closed principle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1&gt;Disadvantages&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Team adoption&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;At first sight people don&amp;#39;t see the benefits of extracting service objects in
their Rails application and tend to think this is over engineering but having
proper place for individual functionality help us with the maintainability and
extensibility of the code. When you have several smaller objects in a system
it&amp;#39;s easier to resonate about those smaller pieces than bigger ones.&lt;/p&gt;

&lt;h2&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=CGN4RFkhH2M&quot;&gt;Hexagonal Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=tg5RFeSfBM4&quot;&gt;Decoupling from Rails&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.windycityrails.org/videos/2014/#6&quot;&gt;Domain Driven Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 26 Feb 2015 10:07:01 -0500</pubDate>
        <link>http://cored.github.io/blog/2015/02/26/service-objects-in-rails</link>
        <guid isPermaLink="true">http://cored.github.io/blog/2015/02/26/service-objects-in-rails</guid>
      </item>
    
  </channel>
</rss>